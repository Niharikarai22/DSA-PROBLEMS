class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length]; // Initialize an array to store the result
        int prod = 1; // Initialize a variable to store the product of all elements

        // Calculate the product of all elements to the right of the current element
        for (int i = 1; i < nums.length; i++) {
            prod *= nums[i];
        }

        result[0] = prod; // Store the product of all elements to the right of the first element

        // Iterate through the array
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == 0) {
                prod = 1; // Reset product if the current element is 0

                // Calculate the product of all elements to the left of the current element
                for (int j = 0; j < i; j++) {
                    prod *= nums[j];
                }

                // Calculate the product of all elements to the right of the current element
                for (int j = i + 1; j < nums.length; j++) {
                    prod *= nums[j];
                }

                result[i] = prod; // Store the product in the result array
            } else {
                // Update the product by dividing it by the current element and multiplying it by the previous element
                prod = (prod / nums[i]) * nums[i - 1];
                result[i] = prod; // Store the product in the result array
            }
        }

        return result; // Return the result array
    }
}
